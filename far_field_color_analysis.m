function far_field_color_analysis(filename,frames,varargin)
% Author: Joshua Yeh
% Date created: 19-02-27
% 
%% DESCRIPTION
% This script perform rgb analysis of a fracture, notched sample containing
% spiropyran. THe analysis is performed far away from the crack tip.
% 
%% INPUT variables
% filename: filename of the fracture test that will be analyzed
%
% frames: the frame indices to perform the analysis
% 
% NAME PAIR ARGUMENTS: RGB_analysis(...'<fieldname>',<value>)
% 
% 'ROI': region of interest within the original frame
% 
% 'white_ROI': region of interest within the cropped ROI representing the
% reference white region
% 
% 'mn_file': filename of the mechanical data for the notched sample (.xls
% file generated by the recalc_lambda function)
% 
% 'mu_file': filename of the mechanical data for the unnotched sample (.mat
% file generated by the RGB_analysis function. The .mat file MUST contain
% variables: time_store, R_mean, G_mean, B_mean, RCC, GCC, BCC, R_std,
% G_std, B_std, lambda);
% 
%% OUTPUT
% Note that all the variables in this fcn will be placed in the caller
% workspace.

%% PARSE INPUT VARIABLES

narginchk(2,inf);
params=inputParser;
params.CaseSensitive=false;
params.addParameter('ROI',[550 1200 430 550],@(x) isnumeric(x));
params.addParameter('white_ROI',[450 550 10 25],@(x) isnumeric(x));
params.addParameter('mn_file',[],@(x) ischar(x));
params.addParameter('mu_file',[],@(x) ischar(x));
params.parse(varargin{:});

% Extract out values from parsed input
ROI=params.Results.ROI;
white_ROI=params.Results.white_ROI;
mn_file=params.Results.mn_file;
mu_file=params.Results.mu_file;

disp('far field color analysis started');

% Turn off hardware acceleration
matlab.video.read.UseHardwareAcceleration('off')
%Create a VideoReader object
Vidobj = VideoReader(filename);
% Turn back on the hardware acceleration
matlab.video.read.UseHardwareAcceleration('on')

%% import mechanical data (notched)
[num,txt,raw]=xlsread(mn_file);
    
%get stress value
k=find(strcmp(txt,'Stress (MPa)'));
[~,kc]=ind2sub(size(txt),k);
m_stress=num(:,kc);

%get time value
k=find(strcmp(txt,'Time (s)'));
[~,kc]=ind2sub(size(txt),k);
m_time=num(:,kc);

%get ambda value
k=find(strcmp(txt,'Lambda'));
[~,kc]=ind2sub(size(txt),k);
m_lam=num(:,kc);

%% import mechanical data (UNnotched)
uni=load(mu_file);

disp('mech data loaded');

%% perform farfield color analysis

% allocate arrays
RCC=nan(numel(frames),1);%red chromatic change
GCC=RCC;%green chromatic change
BCC=RCC;%blue chromatic change
RC=RCC;%red chromaticity
GC=RCC;%green chromaticity
BC=RCC;%blue chromaticity
time_store=RCC;

count1=1;% Counter counting the iteration for each while loop
count2=1;% Counter counting the iteration # in the frame array being looped
check=0;

while hasFrame(Vidobj)&&count1<=max(frames)
    % Import current frame
    mov(1).CData=readFrame(Vidobj);%read and store current frame
    mov(1).abs_frame_index=count1;%abs frame index
    mov(1).CurrentTime=Vidobj.CurrentTime;%abs frame time
    
    if count2==1%remember first time point
        start=Vidobj.CurrentTime;
    end
    time_store(count2)=Vidobj.CurrentTime-start;%rel. time
    
    % Prevent processing of duplicate frames
    if count1>1
        if isequal(prev,mov(1).CData)&&count2>1
            check=0;
            count2=count2+1;
            disp('Skipped duplicate frame');
            
        else
            check=1;
        end
    end
    prev=mov(1).CData;
    
    %check to see whether or not to process frame
    if sum(frames==count1)==1&&check==1
        disp(['Current frame time: ',num2str(Vidobj.CurrentTime),...
            ' ',num2str(count1)]);
        %grab frame
        frame=mov(1).CData;

        % Crop out ROI
        subI=frame(ROI(1):ROI(2),ROI(3):ROI(4),:);
        white=frame(white_ROI(1):white_ROI(2),white_ROI(3):white_ROI(4),:);

        % Apply color corrections
        subI_corr=rgb_correction(subI,white,'simple',200);

        % Get RGB ratios
        [rc,gc,bc]=rgb_ratio(subI_corr);
        RC(count2)=nanmean(rc(:));
        GC(count2)=nanmean(gc(:));
        BC(count2)=nanmean(bc(:));
        
        %interpolate mechanical data with vid time
        lam_q=spline(m_time,m_lam,time_store);
        stress_q=spline(uni.lambda,uni.mean_stress,lam_q);
        uni_RCC=spline(uni.mean_stress,uni.mean_RCC,stress_q);
        uni_GCC=spline(uni.mean_stress,uni.mean_GCC,stress_q);
        uni_BCC=spline(uni.mean_stress,uni.mean_BCC,stress_q);

        % compute change in chromaticity
        ii1=find(stress_q<=0.1);

        RCC=RC-nanmean(RC(ii1));
        GCC=GC-nanmean(GC(ii1));
        BCC=BC-nanmean(BC(ii1));

        count2=count2+1;% update counter
    end
    count1=count1+1;% update counter
end

%% compute corrected chromaticity
RCC2=movmean(RCC,15);
BCC2=movmean(BCC,15);
GCC2=0-RCC2-BCC2;

TCC2=sqrt(RCC2.^2+GCC.^2+BCC.^2);
uni_TCC=sqrt(uni_RCC.^2+uni_GCC.^2+uni_BCC.^2);

% determine correction factor
factor=mean(uni_TCC(end-60:end))/mean(TCC2(end-60:end));


%% Plot the results

f1=my_fig(1);
plot(f1.s1,stress_q,RCC2,'r-');
plot(f1.s1,stress_q,GCC2,'g-');
plot(f1.s1,stress_q,BCC2,'b-');
plot(f1.s1,stress_q,uni_RCC,'r--','linewidth',3);
plot(f1.s1,stress_q,uni_GCC,'g--','linewidth',3);
plot(f1.s1,stress_q,uni_BCC,'b--','linewidth',3);
xylabels(f1.s1,'nominal stress (MPa)','chromaticity');
title(f1.s1,'without correction factor');
center_axes(f1.s1);


f2=my_fig(2);
plot(f2.s1,stress_q,RCC2.*factor,'r-');
plot(f2.s1,stress_q,GCC2.*factor,'g-');
plot(f2.s1,stress_q,BCC2.*factor,'b-');
plot(f2.s1,stress_q,uni_RCC,'r--','linewidth',3);
plot(f2.s1,stress_q,uni_GCC,'g--','linewidth',3);
plot(f2.s1,stress_q,uni_BCC,'b--','linewidth',3);
xylabels(f2.s1,'nominal stress (MPa)','chromaticity');
title(f2.s1,'with correction factor');
center_axes(f2.s1);

f3=my_fig(3);
co=f3.s1.ColorOrder;
plot(f3.s1,m_lam,m_stress,'--','color',co(1,:));
plot(f3.s1,uni.lambda,uni.mean_stress,'-','color',co(1,:),'linewidth',3);
xylabels(f3.s1,'lambda','nominal stress (MPa)');
center_axes(f3.s1);

% export fcn workspace to caller workspace
W=who;
out_var(W{:});

disp(['correction factor: ',num2str(factor)]);
disp(['fini: ',datestr(clock),' sample: ',filename]);


function out_var(varargin)
% This function output the function variable space to the base workspace
for dum=1:numel(varargin)
    assignin('base',varargin{dum},evalin('caller',varargin{dum}));
end
